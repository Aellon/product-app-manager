<%

var caramel;
var SubscriptionService;
var subsApi;
var AuthService;
var authenticator;
var log = new Log('subscriptions');

include('../modules/jagg/jagg.jag');

require('/modules/store.js').exec(function (ctx) {
	var store = ctx.store;
	var sso = ctx.sso;
	var carbon = require('carbon')
	tenantId = ctx.tenantId;
	site = ctx.site;
	var recentAssets = store.recentAssets('webapp');
	caramel = require('caramel');
	search = require('/modules/search.js');
	var social = carbon.server.osgiService('org.wso2.carbon.social.core.service.SocialActivityService');
		

	SubscriptionService = require(getServiceDir('subscription.js')).serviceModule;
	subsApi = new SubscriptionService.SubscriptionService();
	subsApi.init(jagg, session);

	AuthService = require(getServiceDir('authentication.js')).serviceModule;
	authenticator = new AuthService.Authenticator();
	authenticator.init(jagg, session);

	var APIInformationService=require('../services/api-information.js').serviceModule;
	var apiInfoManager=new APIInformationService.APIInformationService();
	apiInfoManager.init(jagg,session);

	var subscriptions = [];
	var userData = authenticator.getLoggedInUser();

	//If the user is not logged in, redirect to the login page
    caramel = require('caramel');
    var contextPath = caramel.configs().context;
    var reversProxyEnabled = caramel.configs().reverseProxyEnabled;
    var reverseProxyHost = caramel.configs().reverseProxyHost;
    var reDirectUrl = contextPath;
    if(reversProxyEnabled) {
        reDirectUrl = reverseProxyHost+contextPath;
    }
	if (userData == null) {
		response.sendRedirect(reDirectUrl);
		return;
	}

	var apps = subsApi.getAppsWithSubs({user: userData.username});





    if(apps.length >0){
        subscriptions = apps[0].subscriptions;

        var PAGE_SIZE = store.getPageSize();
        var appsCount = subscriptions.length;
        var pages = Math.ceil(appsCount / PAGE_SIZE);
        var page = request.getParameter('page');
        if(!page) page = 1;
        var limit = page * PAGE_SIZE;
        var offset = limit - PAGE_SIZE - 1;


        var displayApps = [];


        for(i=0;i< apps[0].subscriptions.length;i++){
            var api=apiInfoManager.getAPIDescription( apps[0].subscriptions[i].provider, apps[0].subscriptions[i].name, apps[0].subscriptions[i].version);
			apps[0].subscriptions[i].tenantDomain = carbon.server.tenantDomain({username: apps[0].subscriptions[i].provider});

			var asset = store.asset(type, apps[0].subscriptions[i].uuid);
			apps[0].subscriptions[i].displayName = asset.attributes.overview_displayName;
			if (asset.attributes.overview_skipGateway == "true") {
				apps[0].subscriptions[i].productionURL = asset.attributes.overview_webAppUrl;
			} else {
				apps[0].subscriptions[i].productionURL = api.serverURL.productionURL;
			}

            if((i > offset && i < limit)){
                displayApps.push(apps[0].subscriptions[i]);
            }

        }


        apps[0].subscriptions = displayApps;

    }

	//Recent app rating.
	for (var i = 0; i < recentAssets.length; i++) {
		var webAppRating = JSON.parse(social.getRating("webapp:" + recentAssets[i].id));
		if (webAppRating) {
			recentAssets[i].rating = {average: Math.floor(webAppRating.rating)};
		} else {
			recentAssets[i].rating = 0;
		}
	}

	caramel.render({
		header: {
			user: userData,
			sso: sso
		},
		navigation: site.navigation(tenantId),
		search: {
		            search: {title: type},
		            isTopAssets: false,
		            searchFields: search.fields()
		},
		sso: sso,
		appsWithSubs: apps,
        pages: pages,
        page: page,
		metadata: {
			appsWithSubs: apps
		},
		recentAssets:recentAssets
	}, request, response, session);

}, request, response, session);


function getServiceDir(serviceName) {
	return '../services/' + serviceName;
}

	%>

