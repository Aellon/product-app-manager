<%


require('/modules/publisher.js').exec(function(ctx) {

    var config = require('/config/publisher.json');
    var caramel = require('caramel');

    var router = require('/modules/router-g.js').router();
    var routeManager = new router.Router();
    var appmgtPublisher = require('appmgtpublisher');
    var log= new Log();

    routeManager.register('GET', 'publisher', '/publisher/api/entitlement/{type}/{id}', function (context) {
        var server  = require('store').server;
        var username = server.current(session).username;
        username=username+"";
        var appMgtProviderObj = new appmgtPublisher.APIProvider(username);
        var policyContent = getEntitlementPolicyContent(appMgtProviderObj, context.params.id);
        var log = new Log();
        print(policyContent);
    });

    function createResponseObject(object) {
        if (object !== null) {
            return {'success': true, 'response': object};
        } else {
            return {'success': false, 'response': object};
        }
    }

    /**
     * Saves external entitlement policies.
     */
    function getEntitlementPolicyContent(apiProvider, id){

        var EntitlementPolicy = Packages.org.wso2.carbon.appmgt.api.model.entitlement.EntitlementPolicy;
        return apiProvider.getEntitlementPolicyContent(id);
    }

    var securityModule=require('/modules/security/security.manager.js').securityManagementModule();

    var sm=securityModule.cached();

    //This will short circuit the handling of the requests
    var passed=sm.check(session,function(){
        response.sendError(401);

    });

    //Stop servicing the request if the check failed
    if(passed){

        var user=require('store').user;
        var publisher = require('/modules/publisher.js').publisher(request, session);

        //var routeManager=application.get(config.app.ROUTE_MANAGER);
        var rxtManager = publisher.rxtManager;
        var modelManager = publisher.modelManager;
        var dataInjector=publisher.dataInjector;
        var DataInjectorModes=publisher.DataInjectorModes;
        var filterManager=publisher.filterManager;
        var storageModule = require('/modules/data/storage.js').storageModule();
        var storageConfig = require('/config/storage.json');
        var utility = require('/modules/utility.js').rxt_utility();
        var log=new Log();
        routeManager.handle(request, response);
    }

}, request, response, session);

%>