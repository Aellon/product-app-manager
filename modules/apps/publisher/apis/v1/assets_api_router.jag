<%

require('/modules/publisher.js').exec(function(ctx) {

var config = require('/config/publisher.json');
var caramel = require('caramel');

var router = require('/modules/router-g.js').router();
var routeManager = new router.Router();

var appmgtPublisher = require('appmgtpublisher');
var appMgtProviderObj = new appmgtPublisher.APIProvider();

var log = new Log();

routeManager.register('POST', 'publisher', '/publisher/api/assets/{operation}/{type}/{action}/', function (context) {
    var type = context.params.type;
    var action = context.params.action;
    
    var server  = require('store').server;
    var username = server.current(session).username;
    var tenantId = server.current(session).tenantId;
    var startDate = context.post.startDate;
    var endDate = context.post.endDate;

    //manipulate endDate to overcome date-picker issue
    var date = new Date(Date.parse(endDate.replace(/-/g,"/")));
    date.setDate(date.getDate() + 1);
    // The getMonth() method returns the month (from 0 to 11) for the specified date
    date.setMonth(date.getMonth() + 1);
    endDate = date.getFullYear()+'-'+date.getMonth()+'-'+date.getDate();

    var artifactManager = rxtManager.getArtifactManager(type);
    var model = modelManager.getModel(type);
    var artifact ;

    var usage = [];
    var obj, result;

    /* Web Application Last Access Time Graph */
    if (action == "getProviderAPIVersionUserLastAccess") {
	    //output = stats.getHotAssetStats(startDate,endDate,tenantId);
	    usage = appMgtProviderObj.getProviderAPIVersionUserLastAccess("__all_providers__",startDate,endDate);
	    if (usage == null) {
		    obj = {
		        error:true
		    };

	    } else {
		    obj = {
		        error:false,
		        usage:usage
		    };
		}
	    print(usage);
   } else if (action == "getProviderAPIUsage") { /* Overall Web Application Usage Graph */
	    usage = appMgtProviderObj.getProviderAPIUsage("__all_providers__",startDate,endDate);
	    if (usage == null) {
		    obj = {
		        error:true
		    };

	    } else {
		    obj = {
		        error:false,
		        usage:usage
		    };
		}
	     
	    print(usage);  
   }

});



var securityModule=require('/modules/security/security.manager.js').securityManagementModule();

var sm=securityModule.cached();

//This will short circuit the handling of the requests
var passed=sm.check(session,function(){
    response.sendError(401);
});

//Stop servicing the request if the check failed
if(passed){

    var user = require('store').user;
    var publisher = require('/modules/publisher.js').publisher(request, session);
    var stats = require('/modules/statistics.js');

    //var routeManager=application.get(config.app.ROUTE_MANAGER);
    var rxtManager = publisher.rxtManager;
    var modelManager = publisher.modelManager;

    routeManager.handle(request, response);
}

}, request, response, session);
%>
